import os
import telebot
from telebot import types
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import requests
from flask import Flask, request
import qrcode
from io import BytesIO

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
CREDENTIALS_FILE = "/etc/secrets/credentials.json"

# === Google Sheets –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
client = gspread.authorize(creds)
sheet = client.open("Zarina Answers").sheet1

# === Telegram Bot ===
bot = telebot.TeleBot(TOKEN)

def get_openrouter_answer(user_question):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ OpenRouter –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
    """
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://github.com/Arman",  # –º–æ–∂–Ω–æ –ª—é–±–æ–π URL
        "X-Title": "ZarinaBot",
        "Content-Type": "application/json"
    }
    data = {
        "model": "mistralai/mistral-7b-instruct",
        "messages": [
            {
                "role": "system",
                "content": (
                    "–¢—ã —Ñ–ª–∏—Ä—Ç-–±–æ—Ç üíã. –û—Ç–≤–µ—á–∞–π –≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —Ç–µ–ø–ª–æ, –∏–≥—Ä–∏–≤–æ –∏ —Å–ª–µ–≥–∫–∞ —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–æ. "
                    "–ë—É–¥—å –ø–æ–Ω–∏–º–∞—é—â–∏–º, –¥–æ–±–∞–≤–ª—è–π –Ω–æ—Ç–∫—É —Ñ–ª–∏—Ä—Ç–∞ –∏ —ç–º–æ—Ü–∏–π, –Ω–æ –∏–∑–±–µ–≥–∞–π –ø–æ—à–ª–æ—Å—Ç–∏. "
                    "–û—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º–∏, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏, –±—É–¥—Ç–æ –ø–∏—à–µ—Ç —á–µ–ª–æ–≤–µ–∫. "
                    "–ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–º–∞–π–ª–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è ‚ù§Ô∏èüòâ‚ú®."
                )
            },
            {
                "role": "user",
                "content": user_question
            }
        ],
        "max_tokens": 3000,
        "temperature": 0.8,
        "top_p": 0.95
    }

    response = requests.post(url, headers=headers, json=data)
    response.raise_for_status()
    result = response.json()
    return result["choices"][0]["message"]["content"].strip()

@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ó–∞–¥–∞–π –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å üí¨")

@bot.message_handler(commands=["donate"])
def donate(message):
    keyboard = types.InlineKeyboardMarkup()
    kaspi_number = "+77089871147"   # üëâ –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π –Ω–æ–º–µ—Ä Kaspi
    pay_button = types.InlineKeyboardButton(
        "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Kaspi",
        url=f"https://kaspi.kz/pay/{kaspi_number}"
    )
    keyboard.add(pay_button)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞
    qr_data = f"https://kaspi.kz/pay/{kaspi_number}"
    qr_img = qrcode.make(qr_data)

    bio = BytesIO()
    qr_img.save(bio, format="PNG")
    bio.seek(0)

    bot.send_photo(
        message.chat.id,
        photo=bio,
        caption=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É ‚ù§Ô∏è\n\nKaspi Gold: `{kaspi_number}`",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@bot.message_handler(func=lambda m: True)
def handle_question(message):
    user = message.from_user
    question = message.text

    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter
        answer = get_openrouter_answer(question)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(message.chat.id, answer)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
        sheet.append_row([
            user.id,
            user.first_name or "",
            user.username or "",
            question,
            answer
        ])

    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")

# === Flask Webhook ===
app = Flask(__name__)

@app.route(f"/webhook/{TOKEN}", methods=["POST"])
def webhook():
    json_str = request.get_data().decode("UTF-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "OK", 200

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)