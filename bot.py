import os
import telebot
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import requests
from flask import Flask, request

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
CREDENTIALS_FILE = "/etc/secrets/credentials.json"

# === Google Sheets –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
client = gspread.authorize(creds)
sheet = client.open("Zarina Answers").sheet1

# === Telegram Bot ===
bot = telebot.TeleBot(TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏ –∏—Å—Ç–æ—Ä–∏–∏
last_questions = {}
asked_questions = {}

def ask_openrouter_question(chat_id):
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    history = asked_questions.get(chat_id, [])
    history_text = "\n".join(f"- {q}" for q in history[-10:])  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤

    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "mistralai/mistral-7b-instruct",
        "messages": [
            {
                "role": "system",
                "content": (
                    "–¢—ã –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. "
                    "–ó–∞–¥–∞–≤–∞–π —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω –∫–æ—Ä–æ—Ç–∫–∏–π –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. "
                    "–ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –ø–æ —Å–º—ã—Å–ª—É –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã. "
                    "–í–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±–µ–∑ –æ—à–∏–±–æ–∫ –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤."
                )
            },
            {
                "role": "user",
                "content": f"–í–æ—Ç –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∑–∞–¥–∞–≤–∞–ª–∏—Å—å:\n{history_text}\n\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π –Ω–æ–≤—ã–π, –Ω–µ –ø–æ—Ö–æ–∂–∏–π –ø–æ —Å–º—ã—Å–ª—É."
            }
        ],
        "max_tokens": 200,
        "temperature": 0.9,
        "top_p": 0.95
    }

    response = requests.post(url, headers=headers, json=data)
    response.raise_for_status()
    result = response.json()
    question = result["choices"][0]["message"]["content"].strip()
    return question.split("\n")[0]

@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –•–æ—á—É –∑–∞–¥–∞—Ç—å —Ç–µ–±–µ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤ üí¨")
    ask_ai_question(message.chat.id)

def ask_ai_question(chat_id):
    try:
        question = ask_openrouter_question(chat_id)
        bot.send_message(chat_id, question)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –ø–∞–º—è—Ç—å
        last_questions[chat_id] = question
        asked_questions.setdefault(chat_id, []).append(question)

    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –ò–ò: {str(e)}")

@bot.message_handler(func=lambda m: True)
def handle_answer(message):
    question = last_questions.get(message.chat.id, "–í–æ–ø—Ä–æ—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
    answer = message.text
    user = message.from_user

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å+–æ—Ç–≤–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü—É
    sheet.append_row([
        user.id,
        user.first_name or "",
        user.username or "",
        question,
        answer
    ])

    bot.send_message(message.chat.id, "–û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω! –í–æ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:")
    ask_ai_question(message.chat.id)

# === Flask Webhook ===
app = Flask(__name__)

@app.route(f"/webhook/{TOKEN}", methods=["POST"])
def webhook():
    json_str = request.get_data().decode("UTF-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "OK", 200

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
