import os
import requests
import telebot
from flask import Flask, request

TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
APP_URL = os.getenv("APP_URL")  # https://—Ç–≤–æ–π-–ø—Ä–æ–µ–∫—Ç.onrender.com

bot = telebot.TeleBot(TOKEN)
server = Flask(__name__)

# ===== AI —Ñ—É–Ω–∫—Ü–∏—è —á–µ—Ä–µ–∑ OpenRouter =====
def get_ai_question():
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "mistralai/mistral-7b-instruct",
        "messages": [
            {"role": "user", "content": "–ó–∞–¥–∞–π –æ–¥–∏–Ω –∫–æ—Ä–æ—Ç–∫–∏–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –≤–æ–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞."}
        ]
    }
    r = requests.post(url, headers=headers, json=payload, timeout=30)
    r.raise_for_status()
    data = r.json()
    return data["choices"][0]["message"]["content"].strip()

# ===== –ö–æ–º–∞–Ω–¥–∞ /start =====
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å —Ç–µ–±–µ –≤–æ–ø—Ä–æ—Å—ã ü§ñ")
    ask_question(message.chat.id)

# ===== –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å =====
def ask_question(chat_id):
    try:
        question = get_ai_question()
        bot.send_message(chat_id, question)
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")

# ===== –û—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç =====
@bot.message_handler(func=lambda message: True)
def handle_answer(message):
    # –¢—É—Ç –ø–æ–∑–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Google –¢–∞–±–ª–∏—Ü—É
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç! –í–æ—Ç –µ—â–µ –≤–æ–ø—Ä–æ—Å:")
    ask_question(message.chat.id)

# ===== Webhook =====
@server.route('/' + TOKEN, methods=['POST'])
def getMessage():
    bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
    return "!", 200

@server.route("/")
def webhook():
    bot.remove_webhook()
    bot.set_webhook(url=APP_URL + TOKEN)
    return "!", 200

if __name__ == "__main__":
    server.run(host="0.0.0.0", port=int(os.environ.get('PORT', 5000)))
